(define (positive-rat? n d)
  (or (and (> n 0) (> d 0))
      (and (< n 0) (< d 0))))
(define (rat-sign n d)
  (if (positive-rat? n d) + -))
(define (make-rat n d)
  (let ((g (gcd n d)) (sign (rat-sign n d)))
    (cons (/ (sign (abs n)) g) (/ (abs d) g))))
(define (numer x) (car x))
(define (denom x) (cdr x))
(define (add-rat x y)
  (make-rat
    (+ (* (numer x) (denom y))
       (* (numer y) (denom x)))
    (* (denom x) (denom y))))

(define a (make-rat 4 6))
(define b (make-rat -4 6))
(define c (make-rat 4 -6))
(define d (make-rat -4 -6))
